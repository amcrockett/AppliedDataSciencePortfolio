library(tidyr)
library(tidytext)
library(readtext)
library(tm)
library(SnowballC)
library(wordcloud)
library(RColorBrewer)
library(caret)
library(rpart.plot)
library(arules)
library(rpart)
ripper <- read.csv("ripper_data_set.csv")
ripper_tall <- ripper %>%
gather(word = 3:525, value = freq)
Jripper <- ripper_tall %>%
filter(author == "Jack the Ripper")
Jripper <- Jripper[,-2]
Jripper <- aggregate(. ~ author + key, data = Jripper, sum)
Jripper <- Jripper %>%
filter(freq != 0)
Jripper$freq <- Jripper$freq * 100
set.seed(1234)
wordcloud(words = Jripper$key, freq = Jripper$freq, min.freq = 1,
max.words=200, random.order=FALSE, rot.per=0.35,
colors=brewer.pal(4, "RdGy"))
Uripper <- ripper_tall %>%
filter(author != "Jack the Ripper")
Uripper <- Uripper[,-1:-2]
Uripper <- aggregate(. ~ key, data = Uripper, sum)
Uripper <- Uripper %>%
filter(freq != 0)
Uripper$freq <- Uripper$freq * 100
set.seed(1234)
wordcloud(words = Uripper$key, freq = Uripper$freq, min.freq = 1,
max.words=200, random.order=FALSE, rot.per=0.35,
colors=brewer.pal(4, "RdGy")
ripper_tall <- ripper %>%
gather(word = 3:525, value = freq)
Jripper <- ripper_tall %>%
filter(author == "Jack the Ripper")
Jripper <- Jripper[,-2]
Jripper <- aggregate(. ~ author + key, data = Jripper, sum)
Jripper <- Jripper %>%
filter(freq != 0)
Jripper$freq <- Jripper$freq * 100
set.seed(1234)
wordcloud(words = Jripper$key, freq = Jripper$freq, min.freq = 1,
max.words=200, random.order=FALSE, rot.per=0.35,
colors=brewer.pal(4, "RdGy"))
Uripper <- ripper_tall %>%
filter(author != "Jack the Ripper")
Uripper <- Uripper[,-1:-2]
Uripper <- aggregate(. ~ key, data = Uripper, sum)
Uripper <- Uripper %>%
filter(freq != 0)
Uripper$freq <- Uripper$freq * 100
set.seed(1234)
wordcloud(words = Uripper$key, freq = Uripper$freq, min.freq = 1,
max.words=200, random.order=FALSE, rot.per=0.35,
colors=brewer.pal(4, "RdGy"))
ripper_tall <- ripper %>%
gather(word = 3:525, value = freq)
Jripper <- ripper_tall %>%
filter(author == "Jack the Ripper")
Jripper <- Jripper[,-2]
Jripper <- aggregate(. ~ author + key, data = Jripper, sum)
Jripper <- Jripper %>%
filter(freq != 0)
Jripper$freq <- Jripper$freq * 100
set.seed(1234)
wordcloud(words = Jripper$key, freq = Jripper$freq, min.freq = 1,
max.words=200, random.order=FALSE, rot.per=0.35,
colors=brewer.pal(4, "RdGy"))
Uripper <- ripper_tall %>%
filter(author != "Jack the Ripper")
Uripper <- Uripper[,-1:-2]
Uripper <- aggregate(. ~ key, data = Uripper, sum)
Uripper <- Uripper %>%
filter(freq != 0)
Uripper$freq <- Uripper$freq * 100
set.seed(1234)
wordcloud(words = Uripper$key, freq = Uripper$freq, min.freq = 1,
max.words=200, random.order=FALSE, rot.per=0.35,
colors=brewer.pal(4, "RdGy"))
ripper_tall <- ripper %>%
gather(word = 3:525, value = freq)
Jripper <- ripper_tall %>%
filter(author == "Jack the Ripper")
Jripper <- Jripper[,-2]
Jripper <- aggregate(. ~ author + key, data = Jripper, sum)
Jripper <- Jripper %>%
filter(freq != 0)
Jripper$freq <- Jripper$freq * 100
set.seed(1234)
wordcloud(words = Jripper$key, freq = Jripper$freq, min.freq = 1,
max.words=200, random.order=FALSE, rot.per=0.35,
colors=brewer.pal(4, "RdGy"))
Uripper <- ripper_tall %>%
filter(author != "Jack the Ripper")
Uripper <- Uripper[,-1:-2]
Uripper <- aggregate(. ~ key, data = Uripper, sum)
Uripper <- Uripper %>%
filter(freq != 0)
Uripper$freq <- Uripper$freq * 100
set.seed(1234)
wordcloud(words = Uripper$key, freq = Uripper$freq, min.freq = 1,
max.words=100, random.order=FALSE, rot.per=0.35,
colors=brewer.pal(4, "RdGy"))
ripper_tall <- ripper %>%
gather(word = 3:525, value = freq)
Jripper <- ripper_tall %>%
filter(author == "Jack the Ripper")
Jripper <- Jripper[,-2]
Jripper <- aggregate(. ~ author + key, data = Jripper, sum)
Jripper <- Jripper %>%
filter(freq != 0)
Jripper$freq <- Jripper$freq * 100
set.seed(1234)
wordcloud(words = Jripper$key, freq = Jripper$freq, min.freq = 1,
max.words=200, random.order=FALSE, rot.per=0.35,
colors=brewer.pal(4, "RdGy"))
###K Means Clustering
ripper_no_labels <- ripper[,-1:-2]
ripper_kmeans <- kmeans(ripper_no_labels, centers = 10)
ripper_kmeans
fviz_cluster(ripper_kmeans, data = ripper_no_labels)
###K Means Clustering
ripper_no_labels <- ripper[,-1:-2]
ripper_kmeans <- kmeans(ripper_no_labels, centers = 10)
#ripper_kmeans
fviz_cluster(ripper_kmeans, data = ripper_no_labels)
cluster_df <- data.frame(ripper, ripper_kmeans$cluster)
# ggplot(cluster_df)
cluster_df_tall <- cluster_df %>%
gather(key = word, value = value, 3:525)
ggplot(data = cluster_df_tall) +
geom_jitter(aes(x = value, y = ripper_kmeans.cluster, color = author))
library(stats)
library(factoextra)
library(tidyverse)
library(tidyr)
library(tidytext)
library(readtext)
library(tm)
library(SnowballC)
library(wordcloud)
library(RColorBrewer)
library(caret)
library(rpart.plot)
library(arules)
library(rpart)
library(stats)
library(factoextra)
ripper <- read.csv("ripper_data_set.csv")
library(cowplot)
###K Means Clustering
ripper_no_labels <- ripper[,-1:-2]
ripper_kmeans <- kmeans(ripper_no_labels, centers = 10)
#ripper_kmeans
kcluster <- fviz_cluster(ripper_kmeans, data = ripper_no_labels)
cluster_df <- data.frame(ripper, ripper_kmeans$cluster)
# ggplot(cluster_df)
cluster_df_tall <- cluster_df %>%
gather(key = word, value = value, 3:525)
scatterk <- ggplot(data = cluster_df_tall) +
geom_jitter(aes(x = value, y = ripper_kmeans.cluster, color = author))
plot_grid(kcluster, scatterk, rows = 2)
###K Means Clustering
ripper_no_labels <- ripper[,-1:-2]
ripper_kmeans <- kmeans(ripper_no_labels, centers = 10)
#ripper_kmeans
kcluster <- fviz_cluster(ripper_kmeans, data = ripper_no_labels)
cluster_df <- data.frame(ripper, ripper_kmeans$cluster)
# ggplot(cluster_df)
cluster_df_tall <- cluster_df %>%
gather(key = word, value = value, 3:525)
scatterk <- ggplot(data = cluster_df_tall) +
geom_jitter(aes(x = value, y = ripper_kmeans.cluster, color = author))
plot_grid(kcluster, scatterk, rows = )
###K Means Clustering
ripper_no_labels <- ripper[,-1:-2]
ripper_kmeans <- kmeans(ripper_no_labels, centers = 10)
#ripper_kmeans
kcluster <- fviz_cluster(ripper_kmeans, data = ripper_no_labels)
cluster_df <- data.frame(ripper, ripper_kmeans$cluster)
# ggplot(cluster_df)
cluster_df_tall <- cluster_df %>%
gather(key = word, value = value, 3:525)
scatterk <- ggplot(data = cluster_df_tall) +
geom_jitter(aes(x = value, y = ripper_kmeans.cluster, color = author))
plot_grid(kcluster, scatterk, rows = 2)
###K Means Clustering
ripper_no_labels <- ripper[,-1:-2]
ripper_kmeans <- kmeans(ripper_no_labels, centers = 10)
#ripper_kmeans
kcluster <- fviz_cluster(ripper_kmeans, data = ripper_no_labels)
cluster_df <- data.frame(ripper, ripper_kmeans$cluster)
# ggplot(cluster_df)
cluster_df_tall <- cluster_df %>%
gather(key = word, value = value, 3:525)
scatterk <- ggplot(data = cluster_df_tall) +
geom_jitter(aes(x = value, y = ripper_kmeans.cluster, color = author))
plot_grid(kcluster, scatterk, rows = 2)
library(rattle)
install.packages("rattle")
library(rattle)
fancyRpartPlot(dtree_fit$finalModel)
####Decision tree
ripper[,-2]
removeFactors <- function(x) { if(is.factor(x)) factor(x) else x }
# split dataframe into training and test set
training <- subset(ripper, author != 'Jack the Ripper')
training[] <- lapply(training, removeFactors)
testing <- subset(ripper, author == 'Jack the Ripper')
testing[] <- lapply(testing, removeFactors)
train_control <- trainControl(method = "repeatedcv", number = 10, repeats = 5)
set.seed(333)
dtree_fit <- train(author ~., data = training, method = "rpart",
parms = list(split = "information"),
trControl=train_control,
tuneLength = 20)
dtree_fit
prp(dtree_fit$finalModel, box.palette = "Reds", tweak = 3)
fancyRpartPlot(dtree_fit$finalModel)
fancyRpartPlot(dtree_fit$finalModel)
predict(dtree_fit, testing)
ripper[,-2]
removeFactors <- function(x) { if(is.factor(x)) factor(x) else x }
# split dataframe into training and test set
training <- subset(ripper, author != 'Jack the Ripper')
training[] <- lapply(training, removeFactors)
testing <- subset(ripper, author == 'Jack the Ripper')
testing[] <- lapply(testing, removeFactors)
train_control <- trainControl(method = "repeatedcv", number = 10, repeats = 5)
set.seed(333)
dtree_fit <- train(author ~., data = training, method = "rpart",
parms = list(split = "information"),
trControl=train_control,
tuneLength = 20)
dtree_fit
predict(dtree_fit, testing)
prp(dtree_fit$finalModel, box.palette = "Reds", tweak = 3)
fancyRpartPlot(dtree_fit$finalModel)
View(ripper)
ripper <- ripper[,-2]
removeFactors <- function(x) { if(is.factor(x)) factor(x) else x }
# split dataframe into training and test set
training <- subset(ripper, author != 'Jack the Ripper')
training[] <- lapply(training, removeFactors)
testing <- subset(ripper, author == 'Jack the Ripper')
testing[] <- lapply(testing, removeFactors)
train_control <- trainControl(method = "repeatedcv", number = 10, repeats = 5)
set.seed(333)
dtree_fit <- train(author ~., data = training, method = "rpart",
parms = list(split = "information"),
trControl=train_control,
tuneLength = 20)
dtree_fit
predict(dtree_fit, testing)
pred <- predict(dtree_fit, testing)
pred <- as.data.frame(pred)
View(pred)
View(pred)
fancyRpartPlot?
?
kljdfh
??fancyRpartPlot
fancyRpartPlot(dtree_fit)
fit <- rpart(author ~ ., data = training, method = "class")
fit <- rpart(author ~ ., data = training, method = "class")
fit
fancyRpartPlot(fit)
fit <- rpart(author ~ ., data = training, method = "class", control =  train_control)
fancyRpartPlot(dtree_fit$finalModel)
pred <- predict(dtree_fit, testing)
pred
set.seed(1988)
model_svmRBF <- train(author ~ ., data = training,
preProcess = c("center","scale"),
method = "svmRadial",
trControl = trainControl(method = "boot",
number = 25),
tuneGrid = expand.grid(sigma = seq(0,1,0.1),
C = seq(0,1,0.1)))
model_svmRBF
pred <- predict(model_svmRBF, newdata = testing)
pred
ripper_kmeans
ripper_kmeans$betweenss/ripper_kmeans$totss*100
dtree_fit
compare <- data.frame(model = c("Kmeans", "Decision Tree", "SVM"),
accuracy = c(85.41, 30, 23.27))
compare <- data.frame(model = c("Kmeans", "Decision Tree", "SVM"),
accuracy = c(85.41, 30, 23.27))
ggplot(compare) +
geom_col(aes(model, accuracy, fill = model), color = "grey25") +
labs(title = "Model Accuracy Comparison")
compare <- data.frame(model = c("Kmeans", "Decision Tree", "SVM"),
accuracy = c(85.41, 30, 23.27))
ggplot(compare) +
geom_col(aes(model, accuracy), color = "grey25") +
scale_fill_manual(values = c("red4", "grey45", "lightblue4"))
labs(title = "Model Accuracy Comparison")
compare <- data.frame(model = c("Kmeans", "Decision Tree", "SVM"),
accuracy = c(85.41, 30, 23.27))
ggplot(compare) +
geom_col(aes(model, accuracy), color = "grey25") +
scale_fill_manual(values = c("red4", "grey45", "lightblue4")) +
labs(title = "Model Accuracy Comparison")
compare <- data.frame(model = c("Kmeans", "Decision Tree", "SVM"),
accuracy = c(85.41, 30, 23.27))
ggplot(compare) +
geom_col(aes(model, accuracy), color = "grey25") +
scale_fill_manual(value = c("red4", "grey45", "lightblue4")) +
labs(title = "Model Accuracy Comparison")
compare <- data.frame(model = c("Kmeans", "Decision Tree", "SVM"),
accuracy = c(85.41, 30, 23.27))
ggplot(compare) +
geom_col(aes(model, accuracy), color = "grey25") +
scale_fill_manual(values = c("red4", "grey45", "lightblue4")) +
labs(title = "Model Accuracy Comparison")
compare <- data.frame(model = c("Kmeans", "Decision Tree", "SVM"),
accuracy = c(85.41, 30, 23.27))
ggplot(compare) +
geom_col(aes(model, accuracy, fill = model), color = "grey25") +
scale_fill_manual(values = c("red4", "grey45", "lightblue4")) +
labs(title = "Model Accuracy Comparison")
ripper_kmeans
View(dtree_fit)
dtree_fit
knitr::opts_chunk$set(echo = T, eval = TRUE, warning=FALSE, message=FALSE)
knitr::opts_chunk$set(tidy = TRUE)
knitr::opts_chunk$set(tidy.opts=list(width.cutoff=36))
knitr::opts_chunk$set(size = "small")
knitr::opts_hooks$set(fig.width = function(options) {
if (options$fig.width < options$fig.height) {
options$fig.width = options$fig.height
}
options
})
knitr::knit_hooks$set(mysize = function(before, options, envir) {
if (before)
return(options$size)
})
library(tidyverse)
library(tidyr)
library(tidytext)
library(readtext)
library(tm)
library(SnowballC)
library(wordcloud)
library(RColorBrewer)
library(caret)
library(rpart.plot)
library(arules)
library(rpart)
library(stats)
library(factoextra)
library(cowplot)
library(rattle)
library(plotly)
ripper <- read.csv("ripper_data_set.csv")
dt.train <- function(trainset, number = 3, repeats = 3, tuneLength = 10){
train_control <- trainControl(method = "repeatedcv", number = number, repeats = repeats)
dtree_fit <- train(author ~., data = trainset, method = "rpart",
parms = list(split = "information"),
trControl=train_control,
tuneLength = tuneLength)
return(dtree_fit)
}
dt.predictionTable <- function(dtree_fit, trainset, testset){
prediction <- predict(dtree_fit, newdata = testset)
prediction
with(trainset, table(prediction, testset$author))
}
ripper_no_labels <- ripper[,-1:-2]
ripper_kmeans <- kmeans(ripper_no_labels, centers = 10)
cluster_df <- data.frame(ripper, ripper_kmeans$cluster)
cluster_df_tall <- cluster_df %>%
gather(key = word, value = value, 3:525)
removeFactors <- function(x) { if(is.factor(x)) factor(x) else x }
training <- subset(cluster_df_tall, author != 'Jack the Ripper')[,-2]
training[] <- lapply(training, removeFactors)
testing <- subset(cluster_df_tall, author == 'Jack the Ripper')[,-2]
testing[] <- lapply(testing, removeFactors)
# train
dt.fit <- dt.train(training, number = 10, tuneLength = 20)
# display results
#dt.predictionTable(dt.fit, training , testing)
prp(dt.fit$finalModel, box.palette = "Reds", tweak = 1.2)
fancyRpartPlot(dt.fit$finalModel)
dt.fit
dt.predictionTable(dt.fit, training , testing)
dt.train <- function(trainset, number = 3, repeats = 3, tuneLength = 10){
train_control <- trainControl(method = "repeatedcv", number = number, repeats = repeats)
dtree_fit <- train(author ~., data = trainset, method = "rpart",
parms = list(split = "information"),
trControl=train_control,
tuneLength = tuneLength)
return(dtree_fit)
}
dt.predictionTable <- function(dtree_fit, trainset, testset){
prediction <- predict(dtree_fit, newdata = testset)
prediction
with(trainset, table(prediction, testset$author))
}
ripper_no_labels <- ripper[,-1:-2]
ripper_kmeans <- kmeans(ripper_no_labels, centers = 10)
cluster_df <- data.frame(ripper, ripper_kmeans$cluster)
cluster_df_tall <- cluster_df %>%
gather(key = word, value = value, 3:525)
removeFactors <- function(x) { if(is.factor(x)) factor(x) else x }
training <- subset(cluster_df_tall, author != 'Jack the Ripper')[,-2]
training[] <- lapply(training, removeFactors)
testing <- subset(cluster_df_tall, author == 'Jack the Ripper')[,-2]
testing[] <- lapply(testing, removeFactors)
# train
dt.fit <- dt.train(training, number = 10, tuneLength = 20)
# display results
dt.predictionTable(dt.fit, training , testing)
prp(dt.fit$finalModel, box.palette = "Reds", tweak = 1.2)
fancyRpartPlot(dt.fit$finalModel)
dt.train <- function(trainset, number = 3, repeats = 3, tuneLength = 10){
train_control <- trainControl(method = "repeatedcv", number = number, repeats = repeats)
dtree_fit <- train(author ~., data = trainset, method = "rpart",
parms = list(split = "information"),
trControl=train_control,
tuneLength = tuneLength)
return(dtree_fit)
}
dt.predictionTable <- function(dtree_fit, trainset, testset){
prediction <- predict(dtree_fit, newdata = testset)
prediction
with(trainset, table(prediction, testset$author))
}
ripper_no_labels <- ripper[,-1:-2]
ripper_kmeans <- kmeans(ripper_no_labels, centers = 10)
cluster_df <- data.frame(ripper, ripper_kmeans$cluster)
cluster_df_tall <- cluster_df %>%
gather(key = word, value = value, 3:525)
removeFactors <- function(x) { if(is.factor(x)) factor(x) else x }
training <- subset(cluster_df_tall, author != 'Jack the Ripper')[,-2]
training[] <- lapply(training, removeFactors)
testing <- subset(cluster_df_tall, author == 'Jack the Ripper')[,-2]
testing[] <- lapply(testing, removeFactors)
set.seed(1988)
# train
dt.fit <- dt.train(training, number = 10, tuneLength = 20)
# display results
dt.predictionTable(dt.fit, training , testing)
prp(dt.fit$finalModel, box.palette = "Reds", tweak = 1.2)
fancyRpartPlot(dt.fit$finalModel)
dt.train <- function(trainset, number = 3, repeats = 3, tuneLength = 10){
train_control <- trainControl(method = "repeatedcv", number = number, repeats = repeats)
dtree_fit <- train(author ~., data = trainset, method = "rpart",
parms = list(split = "information"),
trControl=train_control,
tuneLength = tuneLength)
return(dtree_fit)
}
dt.predictionTable <- function(dtree_fit, trainset, testset){
prediction <- predict(dtree_fit, newdata = testset)
prediction
with(trainset, table(prediction, testset$author))
}
ripper_no_labels <- ripper[,-1:-2]
ripper_kmeans <- kmeans(ripper_no_labels, centers = 10)
cluster_df <- data.frame(ripper, ripper_kmeans$cluster)
cluster_df_tall <- cluster_df %>%
gather(key = word, value = value, 3:525)
removeFactors <- function(x) { if(is.factor(x)) factor(x) else x }
training <- subset(cluster_df_tall, author != 'Jack the Ripper')[,-2]
training[] <- lapply(training, removeFactors)
testing <- subset(cluster_df_tall, author == 'Jack the Ripper')[,-2]
testing[] <- lapply(testing, removeFactors)
set.seed(3333)
# train
dt.fit <- dt.train(training, number = 10, tuneLength = 20)
# display results
dt.predictionTable(dt.fit, training , testing)
prp(dt.fit$finalModel, box.palette = "Reds", tweak = 1.2)
fancyRpartPlot(dt.fit$finalModel)
dt.train <- function(trainset, number = 3, repeats = 3, tuneLength = 10){
train_control <- trainControl(method = "repeatedcv", number = number, repeats = repeats)
dtree_fit <- train(author ~., data = trainset, method = "rpart",
parms = list(split = "information"),
trControl=train_control,
tuneLength = tuneLength)
return(dtree_fit)
}
dt.predictionTable <- function(dtree_fit, trainset, testset){
prediction <- predict(dtree_fit, newdata = testset)
prediction
with(trainset, table(prediction, testset$author))
}
ripper_no_labels <- ripper[,-1:-2]
ripper_kmeans <- kmeans(ripper_no_labels, centers = 10)
cluster_df <- data.frame(ripper, ripper_kmeans$cluster)
cluster_df_tall <- cluster_df %>%
gather(key = word, value = value, 3:525)
removeFactors <- function(x) { if(is.factor(x)) factor(x) else x }
training <- subset(cluster_df_tall, author != 'Jack the Ripper')[,-2]
training[] <- lapply(training, removeFactors)
testing <- subset(cluster_df_tall, author == 'Jack the Ripper')[,-2]
testing[] <- lapply(testing, removeFactors)
set.seed(1234)
# train
dt.fit <- dt.train(training, number = 10, tuneLength = 20)
# display results
dt.predictionTable(dt.fit, training , testing)
prp(dt.fit$finalModel, box.palette = "Reds", tweak = 1.2)
fancyRpartPlot(dt.fit$finalModel)
